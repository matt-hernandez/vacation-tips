{"version":3,"sources":["main.bd3fd81a.chunk.css","/Users/matthernandez/Desktop/Other/vacation-tips/src/index.scss","/Users/matthernandez/Desktop/Other/vacation-tips/node_modules/include-media/dist/_include-media.scss"],"names":[],"mappings":"AAAA,6EAA6E,CCI7E,2ZAaC,QAAA,CACA,SAAA,CACA,QAAA,CACA,cAAA,CACA,YAAA,CACA,sBAAwB,CAGzB,8EAEC,aAAc,CAGf,KACC,aAAc,CAGf,MACC,eAAgB,CAGjB,aACC,WAAY,CAGb,oDAEC,UAAA,CACA,YAAa,CAGd,MACC,wBAAA,CACA,gBAAiB,CAGlB,EACE,qBAAsB,CAsBxB,KACE,cApBmB,CAuBrB,KACE,QAAA,CACA,SAAA,CACA,mIAAA,CAGA,wBAAA,CACA,kCAAA,CACA,iCAAkC,CAGpC,GAEE,iBAAA,CACA,8BAAA,CACA,iBAAA,CACA,aApC0B,CAuC5B,QAPE,qBA/B4B,CAsC9B,KAEE,mBAAA,CACA,kBAAA,CACA,8BAAA,CACA,aA3C4B,CA8C9B,GACE,oBAAqB,CAGvB,EACE,kBA7CqB,CAgDvB,OACE,eAAgB,CAGlB,IACE,cAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,qBAAA,CACA,wCAAA,CACA,eAAA,CACA,+CAAA,CAAA,uCAAA,CACA,qCAAA,CAAA,6BAAA,CAAA,wDAAgC,CATlC,OAYI,+BAAA,CAAA,uBAAwB,CAZ5B,OAgBI,eAAA,CACA,oBAAA,CACA,+BAA4D,CAlBhE,kBAqBM,eAAgB,CArBtB,SAyBM,aAAA,CAIA,sCAAA,CACA,aAAA,CACA,cAAA,CACA,oBAAqB,CAK3B,KACE,cAAA,CACA,KAAA,CACA,MAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,UAAA,CACA,WAAA,CAIA,2BAAA,CACA,eAAgB,CAGlB,QACE,eAAA,CACA,WAAA,CACA,aAAc,CCkYZ,yBDrYJ,QAMI,iBA/GmB,CAAA,CAmHvB,aACE,cAAA,CACA,UAAA,CACA,SAAA,CACA,eAGe,CAGjB,yBALE,wBAAA,CACA,QAAA,CACA,cAee,CAZjB,YACE,iBAAA,CACA,SAAA,CACA,WAAA,CAIA,yBAAA,CACA,iBAAA,CACA,cAGe,CAZjB,kBAeI,SAAU,CAId,iBACE,aAAA,CACA,aAAA,CACA,aAAA,CACA,oBAAA,CACA,wBAAqD,CALvD,4BAQI,eAAgB,CAIpB,WACE,YAAA,CACA,6BAAA,CACA,aAAA,CACA,UAAA,CACA,eAAA,CACA,kBAlKqB,CC8enB,yBDlVJ,WASI,iBArKmB,CAAA,CAyKvB,iBACE,oBAAA,CACA,iBAAA,CACA,wBAAA,CACA,4BAAA,CACA,wBAAA,CACA,cAAe,CANjB,0BASI,kCAxL0B,CA4L9B,qBAGI,SAAA,CACA,iCAAA,CAAA,yBAA0B,CAJ9B,uCASM,2BAAgC,CATtC,2DAOM,SAAA,CACA,+BAAA,CAAA,uBAOsB,CAf5B,qCAoBM,uBAA0B,CAKhC,2DAPM,SAAA,CACA,kCAAA,CAAA,0BAUyB,CAJ/B,wCASM,2BAAgC,CATtC,6DAOM,SAAA,CACA,+BAAA,CAAA,uBAOsB,CAf5B,sCAkBM,SAAA,CACA,iCAAA,CAAA,yBAAA,CACA,uBAA0B,CAKhC,QACE,uBAAA,CACA,kBAAA,CACA,qBAAA,CACA,cAAA,CACA,kBAAA,CACA,oBAAA,CACA,sFAAA,CACA,6BAAA,CACA,iBAAkB,CATpB,4BAcM,gBAtPiB,CAwOvB,kBAmBI,aAAA,CACA,cAAA,CACA,iBAAkB,CAItB,QACE,UAAA,CACA,UAAA,CACA,kBApQqB,CAuQvB,EACE,UAAW,CAGb,cACE,UAAA,CACA,iBAAA,CACA,kBA9QqB","file":"main.bd3fd81a.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css?family=Merriweather:300|Raleway);\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline; }\n\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n  display: block; }\n\nbody {\n  line-height: 1; }\n\nol, ul {\n  list-style: none; }\n\nblockquote, q {\n  quotes: none; }\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none; }\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\n* {\n  box-sizing: border-box; }\n\nhtml {\n  font-size: 16px; }\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\n  background-color: #fafafa;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale; }\n\nh1 {\n  margin-bottom: 1.25rem;\n  font-size: 2.25rem;\n  font-family: \"Raleway\", sans-serif;\n  text-align: center;\n  color: #202020; }\n\np, li {\n  margin-bottom: 1.25rem;\n  line-height: 2.25rem;\n  font-size: 1.125rem;\n  font-family: \"Merriweather\", serif;\n  color: #303030; }\n\nli {\n  list-style-type: disc; }\n\na {\n  font-size: 1.125rem; }\n\nstrong {\n  font-weight: 600; }\n\nnav {\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  background-color: #fff;\n  box-shadow: 2.5px 0 5px 0 rgba(0, 0, 0, 0.25);\n  overflow: scroll;\n  -webkit-transform: translateX(calc(-100% - 5px));\n          transform: translateX(calc(-100% - 5px));\n  transition: -webkit-transform 400ms ease;\n  transition: transform 400ms ease;\n  transition: transform 400ms ease, -webkit-transform 400ms ease; }\n  nav.in {\n    -webkit-transform: translateX(0);\n            transform: translateX(0); }\n  nav li {\n    margin-bottom: 0;\n    line-height: 1.375rem;\n    border-bottom: 1px solid #dbdbdb; }\n    nav li:last-child {\n      border-bottom: 0; }\n    nav li a {\n      display: block;\n      padding-top: 0.875rem;\n      padding-right: 1.25rem;\n      padding-bottom: 0.875rem;\n      padding-left: 1.5rem;\n      color: #636363;\n      font-size: 1rem;\n      text-decoration: none; }\n\nmain {\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  padding-top: 2.5rem;\n  padding-right: 1.25rem;\n  padding-bottom: 2rem;\n  padding-left: 1.25rem;\n  overflow: scroll; }\n\nsection {\n  flex-basis: auto;\n  flex-grow: 0;\n  flex-shrink: 0; }\n  @media (min-width: 769px) {\n    section {\n      max-width: 57.5rem; } }\n\n.menu-toggle {\n  position: fixed;\n  top: 0.75rem;\n  left: 1rem;\n  padding: 0.375rem;\n  background-color: transparent;\n  border: 0;\n  cursor: pointer; }\n\n.close-menu {\n  position: absolute;\n  top: 0.5rem;\n  right: 0.5rem;\n  padding-top: 0;\n  padding-right: 0.375rem;\n  padding-bottom: 0.375rem;\n  padding-left: 0.375rem;\n  font-size: 1.75rem;\n  line-height: .8;\n  background-color: transparent;\n  border: 0;\n  cursor: pointer; }\n  .close-menu:focus {\n    outline: 0; }\n\n.hamburger-stick {\n  display: block;\n  width: 1.75rem;\n  height: 0.25rem;\n  margin-bottom: 0.25rem;\n  background-color: #707070; }\n  .hamburger-stick:last-child {\n    margin-bottom: 0; }\n\n.next-prev {\n  display: flex;\n  justify-content: space-between;\n  flex-shrink: 0;\n  width: 100%;\n  margin-top: 1rem;\n  margin-bottom: 1rem; }\n  @media (min-width: 769px) {\n    .next-prev {\n      max-width: 57.5rem; } }\n\n.route-navigator {\n  padding: 0.5rem 0.75rem;\n  font-size: 0.875rem;\n  border: 1px solid #303030;\n  font-family: Arial, sans-serif;\n  background-color: transparent;\n  cursor: pointer; }\n  .route-navigator:disabled {\n    border: 1px solid rgba(48, 48, 48, 0.3); }\n\n.forward .fade-enter {\n  opacity: 0;\n  -webkit-transform: translateX(17%);\n          transform: translateX(17%); }\n  .forward .fade-enter.fade-enter-active {\n    opacity: 1;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n    transition: all 600ms 300ms ease; }\n\n.forward .fade-exit {\n  opacity: 1;\n  -webkit-transform: translateX(0);\n          transform: translateX(0); }\n  .forward .fade-exit.fade-exit-active {\n    opacity: 0;\n    -webkit-transform: translateX(-17%);\n            transform: translateX(-17%);\n    transition: all 600ms ease; }\n\n.backward .fade-enter {\n  opacity: 0;\n  -webkit-transform: translateX(-17%);\n          transform: translateX(-17%); }\n  .backward .fade-enter.fade-enter-active {\n    opacity: 1;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n    transition: all 600ms 300ms ease; }\n\n.backward .fade-exit {\n  opacity: 1;\n  -webkit-transform: translateX(0);\n          transform: translateX(0); }\n  .backward .fade-exit.fade-exit-active {\n    opacity: 0;\n    -webkit-transform: translateX(17%);\n            transform: translateX(17%);\n    transition: all 600ms ease; }\n\n.banner {\n  width: calc(100% + 40px);\n  padding-top: 2.5rem;\n  padding-bottom: 2.5rem;\n  margin-right: 0;\n  margin-top: 1.25rem;\n  margin-bottom: 2.5rem;\n  background-image: linear-gradient(to bottom right, rgba(255, 255, 255, 0.2), rgba(95, 95, 95, 0.2));\n  background-blend-mode: overlay;\n  text-align: center; }\n  .banner i:not(:first-child) {\n    margin-left: 3rem; }\n  .banner .headshot {\n    width: 12.5rem;\n    height: 12.5rem;\n    border-radius: 50%; }\n\n.spacer {\n  height: 1px;\n  width: 100%;\n  margin-bottom: 1rem; }\n\ni {\n  color: #fff; }\n\n.banner-image {\n  width: 100%;\n  margin-top: 0.75rem;\n  margin-bottom: 2rem; }\n\n","@import '~include-media/dist/_include-media.scss';\n\n@import url('https://fonts.googleapis.com/css?family=Merriweather:300|Raleway');\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\n\nbody {\n\tline-height: 1;\n}\n\nol, ul {\n\tlist-style: none;\n}\n\nblockquote, q {\n\tquotes: none;\n}\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\n\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n$base-font-size: 16px;\n$body-background-color: #fafafa;\n$menu-background-color: #fff;\n$heading-text-color: #202020;\n$paragraph-text-color: #303030;\n$heading-font: 'Raleway', sans-serif;\n$paragraph-font: 'Merriweather', serif;\n\n@function rem($font-size, $base: $base-font-size) {\n  $ratio: $font-size / $base;\n  @return $ratio * 1rem;\n}\n\n$breakpoints: (\n  'phone': rem(320px),\n  'tablet': rem(768px),\n  'desktop': rem(1024px)\n) !default;\n\nhtml {\n  font-size: $base-font-size;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  background-color: $body-background-color;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nh1 {\n  margin-bottom: rem(20px);\n  font-size: rem(36px);\n  font-family: $heading-font;\n  text-align: center;\n  color: $heading-text-color;\n}\n\np, li {\n  margin-bottom: rem(20px);\n  line-height: rem(36px);\n  font-size: rem(18px);\n  font-family: $paragraph-font;\n  color: $paragraph-text-color;\n}\n\nli {\n  list-style-type: disc;\n}\n\na {\n  font-size: rem(18px);\n}\n\nstrong {\n  font-weight: 600;\n}\n\nnav {\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  background-color: $menu-background-color;\n  box-shadow: 2.5px 0 5px 0 rgba(0, 0, 0, .25);\n  overflow: scroll;\n  transform: translateX(calc(-100% - 5px));\n  transition: transform 400ms ease;\n\n  &.in {\n    transform: translateX(0);\n  }\n\n  li {\n    margin-bottom: 0;\n    line-height: rem(22px);\n    border-bottom: 1px solid lighten($paragraph-text-color, 67%);\n\n    &:last-child {\n      border-bottom: 0;\n    }\n\n    a {\n      display: block;\n      padding-top: rem(14px);\n      padding-right: rem(20px);\n      padding-bottom: rem(14px);\n      padding-left: rem(24px);\n      color: lighten($paragraph-text-color, 20%);\n      font-size: rem(16px);\n      text-decoration: none;\n    }\n  }\n}\n\nmain {\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  padding-top: rem(40px);\n  padding-right: rem(20px);\n  padding-bottom: rem(32px);\n  padding-left: rem(20px);\n  overflow: scroll;\n}\n\nsection {\n  flex-basis: auto;\n  flex-grow: 0;\n  flex-shrink: 0;\n\n  @include media('>tablet') {\n    max-width: rem(920px);\n  }\n}\n\n.menu-toggle {\n  position: fixed;\n  top: rem(12px);\n  left: rem(16px);\n  padding: rem(6px);\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n}\n\n.close-menu {\n  position: absolute;\n  top: rem(8px);\n  right: rem(8px);\n  padding-top: 0;\n  padding-right: rem(6px);\n  padding-bottom: rem(6px);\n  padding-left: rem(6px);\n  font-size: rem(28px);\n  line-height: .8;\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n\n  &:focus {\n    outline: 0;\n  }\n}\n\n.hamburger-stick {\n  display: block;\n  width: rem(28px);\n  height: rem(4px);\n  margin-bottom: rem(4px);\n  background-color: lighten($paragraph-text-color, 25%);\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n}\n\n.next-prev {\n  display: flex;\n  justify-content: space-between;\n  flex-shrink: 0;\n  width: 100%;\n  margin-top: rem(16px);\n  margin-bottom: rem(16px);\n\n  @include media('>tablet') {\n    max-width: rem(920px);\n  }\n}\n\n.route-navigator {\n  padding: rem(8px) rem(12px);\n  font-size: rem(14px);\n  border: 1px solid $paragraph-text-color;\n  font-family: Arial, sans-serif;\n  background-color: transparent;\n  cursor: pointer;\n\n  &:disabled {\n    border: 1px solid rgba($paragraph-text-color, 0.3);\n  }\n}\n\n.forward {\n\n  .fade-enter {\n    opacity: 0; // start of entrance\n    transform: translateX(17%);\n  \n    &.fade-enter-active { // end of entrance\n      opacity: 1;\n      transform: translateX(0);\n      transition: all 600ms 300ms ease;\n    }\n  }\n\n  .fade-exit {\n    opacity: 1; // start of exit\n    transform: translateX(0);\n  \n    &.fade-exit-active {\n      opacity: 0;\n      transform: translateX(-17%);\n      transition: all 600ms ease;\n    }\n  }\n}\n\n.backward {\n\n  .fade-enter {\n    opacity: 0; // start of entrance\n    transform: translateX(-17%);\n  \n    &.fade-enter-active { // end of entrance\n      opacity: 1;\n      transform: translateX(0);\n      transition: all 600ms 300ms ease;\n    }\n  }\n\n  .fade-exit {\n    opacity: 1; // start of exit\n    transform: translateX(0);\n  \n    &.fade-exit-active {\n      opacity: 0;\n      transform: translateX(17%);\n      transition: all 600ms ease;\n    }\n  }\n}\n\n.banner {\n  width: calc(100% + 40px);\n  padding-top: rem(40px);\n  padding-bottom: rem(40px);\n  margin-right: 0;\n  margin-top: rem(20px);\n  margin-bottom: rem(40px);\n  background-image: linear-gradient(to bottom right, rgba(255, 255, 255, .2), rgba(95, 95, 95, .2));\n  background-blend-mode: overlay;\n  text-align: center;\n\n  i {\n\n    &:not(:first-child) {\n      margin-left: rem(48px);\n    }\n  }\n\n  .headshot {\n    width: rem(200px);\n    height: rem(200px);\n    border-radius: 50%;\n  }\n}\n\n.spacer {\n  height: 1px;\n  width: 100%;\n  margin-bottom: rem(16px);\n}\n\ni {\n  color: #fff;\n}\n\n.banner-image {\n  width: 100%;\n  margin-top: rem(12px);\n  margin-bottom: rem(32px);\n}\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      // scss-lint:disable SpaceAroundOperator\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  // scss-lint:disable SpaceAroundOperator\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n"]}